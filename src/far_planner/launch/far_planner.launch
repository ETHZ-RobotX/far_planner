import launch
from launch import LaunchDescription
from launch_ros.actions import Node
import launch.substitutions
import launch_ros.substitutions

def generate_launch_description():
    return LaunchDescription([
        # Declare arguments
        launch.actions.DeclareLaunchArgument(
            'odom_topic', default_value='/state_estimation', description='Odom topic'
        ),
        launch.actions.DeclareLaunchArgument(
            'terrain_cloud_topic', default_value='/terrain_map_ext', description='Terrain cloud topic'
        ),
        launch.actions.DeclareLaunchArgument(
            'terrain_local_topic', default_value='/terrain_map', description='Terrain local topic'
        ),
        launch.actions.DeclareLaunchArgument(
            'scan_cloud_topic', default_value='/registered_scan', description='Scan cloud topic'
        ),
        launch.actions.DeclareLaunchArgument(
            'config', default_value='default', description='Config for far planner'
        ),

        # Launch far_planner node
        Node(
            package='far_planner',
            executable='far_planner',
            name='far_planner',
            output='screen',
            parameters=[launch.substitutions.LaunchConfiguration('config')],
            remappings=[
                ('/odom_world', launch.substitutions.LaunchConfiguration('odom_topic')),
                ('/terrain_cloud', launch.substitutions.LaunchConfiguration('terrain_cloud_topic')),
                ('/scan_cloud', launch.substitutions.LaunchConfiguration('scan_cloud_topic')),
                ('/terrain_local_cloud', launch.substitutions.LaunchConfiguration('terrain_local_topic'))
            ]
        ),

        # Launch RViz
        Node(
            package='rviz2',
            executable='rviz2',
            name='far_rviz',
            respawn=True,
            arguments=['-d', launch.substitutions.LaunchConfiguration('config')]
        ),

        # Launch graph decoder
        launch.actions.IncludeLaunchDescription(
            launch.launch_description_sources.PythonLaunchDescriptionSource(
                [launch.substitutions.ThisLaunchFileDir(), '/decoder_launch.py']
            )
        )
    ])
